#-----------------------------------------------------------------------------------------------------------
# Name of this configuration
#-----------------------------------------------------------------------------------------------------------
name = polarisBasicLogging
#-----------------------------------------------------------------------------------------------------------
# This is for log4j only logging only if you want to see the status of log4j
# The level of internal Log4j events that should be logged to the console. 
# Valid values for this attribute are "trace", "debug", "info", "warn", "error" and "fatal".
# Log4j will log details about initialization, rollover and other internal actions to the status logger
# Setting status="trace" is one of the first tools available to you if you need to troubleshoot log4j.
#-----------------------------------------------------------------------------------------------------------
status = warn
#-----------------------------------------------------------------------------------------------------------


# Give directory path where log files should get stored
property.basePath = ./logs/
property.baseFile = app.log

#-----------------------------------------------------------------------------------------------------------
# Create Console Appender
# Name of the appender
appender.console.name = consoleLogger
# Type of the Appender
appender.console.type = Console
# Target
appender.console.target = SYSTEM_OUT
# Pattern
appender.console.layout.type = PatternLayout
# Specify the pattern of the logs
appender.console.layout.pattern = %d{yyyy-MM-dd hh:mm:ss.SSS a} %level [%l] - %msg%n


#-------------------------------------------------------------------------------
# RollingFileAppender will print logs in file which can be rotated based on time or size
#-------------------------------------------------------------------------------
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName=${basePath}${baseFile}
# Interval is Based Here
# %d{yyyy-MM-dd-hh-mm}.log.zip	Roll the log files every minutes
# %d{yyyy-MM-dd-hh}.log.zip	Roll the log files hourly
# %d{yyyy-MM-dd}.log.zip Roll the log files daily	
appender.rolling.filePattern=${basePath}app_%d{yyyy-MM-dd}.log.gz
#-------------------------------------------------------------------------------
# When set to true - the default, each write will be followed by a flush. 
# This will guarantee the data is written to disk but could impact performance.
# Flushing after every write is only useful when using this appender 
# with synchronous loggers. Asynchronous loggers and appenders will
# automatically flush at the end of a batch of events, even if immediateFlush
# is set to false. This also guarantees the data is written to disk but is more efficient.
appender.rolling.immediateFlush = false
#-------------------------------------------------------------------------------
#
appender.rolling.append = true
#
appender.rolling.layout.type = PatternLayout
#appender.rolling.layout.pattern = %d{yyyy-MM-dd hh:mm:ss.SSS a} %level [%t] [%c] [%M] [%l] - %msg%n
appender.rolling.layout.pattern = %d{yyyy-MM-dd hh:mm:ss.SSS a} %level [%l] - %msg%n
appender.rolling.policies.type = Policies

#-------------------------------------------------------------------------------
# On Start Up Trigger Policy
#-------------------------------------------------------------------------------
# The OnStartupTriggeringPolicy policy causes a rollover if the log file is
# older than the current JVM's start time and the minimum file size is met or exceeded.
#appender.rolling.policies.time.type = OnStartupTriggeringPolicy
# The minimum size the file must have to roll over. A size of zero will cause a
# roll over no matter what the file size is. The default value is 1, which will
# prevent rolling over an empty file.
#appender.rolling.policies.time.minSize = 1
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# Time based Triggering Policy
#-------------------------------------------------------------------------------
 appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
 # interval based on appender.rolling.filePattern
 appender.rolling.policies.time.interval = 1
#-------------------------------------------------------------------------------
# Indicates whether the interval should be adjusted to cause the next rollover
# to occur on the interval boundary. For example, if the item is hours,
# the current hour is 3 am and the interval is 4 then the first rollover will
# occur at 4 am and then next ones will occur at 8 am, noon, 4pm, etc.
 appender.rolling.policies.time.modulate = false
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Retention Strategy On Files
#-------------------------------------------------------------------------------
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.delete.type = Delete
appender.rolling.strategy.delete.basePath = ${basePath}
#-------------------------------------------------------------------------------
# The maximum number of levels of directories to visit.
# A value of 0 means that only the starting file (the base path itself) is visited,
# unless denied by the security manager. A value of Integer.MAX_VALUE
# indicates that all levels should be visited. The default is 1,
# meaning only the files in the specified base directory.
appender.rolling.strategy.delete.maxDepth = 1
#-------------------------------------------------------------------------------
appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
# Delete files older than 15 days
appender.rolling.strategy.delete.ifLastModified.age = 15d

#-------------------------------------------------------------------------------
# Custom Logger for each Package
#-------------------------------------------------------------------------------
# Mention package name here in place of example. Classes in this package or subpackages will use ConsoleAppender and RollingFileAppender for logging
logger.hikari.name = com.zaxxer.hikari
logger.hikari.level = warn
logger.hikari.additivity = false
logger.hikari.appenderRef.rolling.ref = fileLogger
logger.hikari.appenderRef.console.ref = consoleLogger

logger.polaris.name = org.afterschoolcreatives.polaris
logger.polaris.level = warn
logger.polaris.additivity = false
logger.polaris.appenderRef.rolling.ref = fileLogger
logger.polaris.appenderRef.console.ref = consoleLogger

#-------------------------------------------------------------------------------
# Root logger for packages not listed in the custom logger.
#-------------------------------------------------------------------------------
# Configure root logger for logging error logs in classes which are in package other than above specified package
rootLogger.level = all
rootLogger.additivity = false
rootLogger.appenderRef.rolling.ref = fileLogger
rootLogger.appenderRef.console.ref = consoleLogger